<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-2.5.xsd
    http://www.springframework.org/schema/aop
    https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

<!--                配置Spring IOC的注解                     -->
    <!--    开启annotation注解扫描-->
    <!--    扫描com包下的所有Java文件-->
    <context:annotation-config></context:annotation-config>
    <context:component-scan base-package="com"/>


    <!--                注册MyBatis相关的Bean                    -->
<!--    注册datasource数据源-->
    <context:property-placeholder location="classpath:config/database.properties"/>
    <bean id="ds" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="${database.user}"></property>
        <property name="password" value="${database.password}"></property>
        <property name="url" value="${database.url}"></property>
        <property name="driverClassName" value="${database.className}"></property>
    </bean>
<!--    注册sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="ds"/>
        <property name="configLocation" value="classpath:config/mybatis.xml"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>
<!--    注册生成代理类-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.mapper"/>
    </bean>



    <!--                 基于xml配置aop                   -->
    <!--扫描aop包-->
    <context:component-scan base-package="aop"/>
    <!--增强类-->
    <bean id="enhancer" class="aop.enhencer.XmlEnhancer"/>

    <aop:config>
        <!--配置切面aspect-->
        <aop:aspect ref="enhancer">
            <!--配置pointcut切入点-->
            <aop:pointcut id="pointcut" expression="execution(* aop.service.*.insert*(..) )"/>
            <!--配置通知advice-->
            <!--前置通知-->
            <aop:before method="beforeMethod" pointcut-ref="pointcut"/>
            <!--最终通知-->
            <aop:after method="afterMethod" pointcut-ref="pointcut"/>
            <!--后置通知-->
            <aop:after-returning method="afterNoExceptionMethod" pointcut-ref="pointcut"/>
            <!--异常通知-->
            <aop:after-throwing method="afterExceptionMethod" throwing="e" pointcut-ref="pointcut"/>
             <!--环绕通知-->
            <aop:around method="roundMethod" pointcut-ref="pointcut"/>
        </aop:aspect>
    </aop:config>

    <!--                注解配置aop                 -->
    <!--扫描aop包-->
    <context:component-scan base-package="aop"/>
    <!---启动aop注解-->
    <aop:aspectj-autoproxy/>

<!--    对于以上的xml-based配置和注解配置，-->
<!--    如果运行xml-based配置aop，需要将注解配置aop的xml内容注释-->
<!--    如果运行注解配置aop，需要将xml-based配置aop的xml内容注释-->
<!--    如果运行Java配置aop，需要保留扫描aop包的spring IOC配置才可以正常运行-->
<!--                      按理需要注释该文件所有内容，并创建新的config类配置spring IOC；-->


    <!--                事务管理            -->
    <!--扫描transaction包-->
    <context:component-scan base-package="transaction"/>
    <!--将datasource注册到事务管理器中-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="ds"/>
    </bean>
    <!--开启事务注解-->
    <tx:annotation-driven/>

</beans>
